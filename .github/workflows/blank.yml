# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: python --version

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo installing the rustdesk
          $Url = "https://github.com/rustdesk/rustdesk/releases/download/1.3.1/rustdesk-1.3.1-x86_64.exe"
          $Output = ".\rustdesk-1.3.1-x86_64.exe"  # Saves in the current directory
          
          # Download the MSI file
          Invoke-WebRequest -Uri $Url -OutFile $Output
          
          # Run the MSI exe. file
          .\rustdesk-1.3.1-x86_64.exe
          Start-Sleep -Seconds 7
          echo Screenshot HdX
          powershell
          $currDir = Get-Location
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          
          # Define screen bounds
          $screenBounds = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
          $bitmap = New-Object System.Drawing.Bitmap($screenBounds.Width, $screenBounds.Height)
          
          # Create graphics object from bitmap
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($screenBounds.Location, [System.Drawing.Point]::Empty, $screenBounds.Size)
          
          # Save the screenshot in the current directory
          $screenshotPath = Join-Path $currDir "screenshot.png"
          $bitmap.Save($screenshotPath, [System.Drawing.Imaging.ImageFormat]::Png)
          
          # Clean up resources
          $graphics.Dispose()
          $bitmap.Dispose()
          
          # Output the file path for verification
          $screenshotPath
          
         
          echo listing the files
          ls
          echo sending the image
          $filePath = ".\screenshot.png"
          $uri = "https://7f3eae6ae368e3751ea85210b48e7ad6.serveo.net/upload"
          curl.exe -X POST -F "file=@$filePath" $uri
          pip install flask
          python lowcp.py

          
